# t분포로 랜덤넘버 생성
v <- rt(n = 10000, df = 29)
hist(v, col = 'steelblue', breaks = 100)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2))
curve(dt(x, df = 2), -4, 4)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4)
hist(v, col = 'steelblue', breaks = 100)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4)
curve(dt(x, df = 2), -4, 4, col = 'tomato')
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2)
hist(v, col = 'steelblue', breaks = 100, probability = F)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
# t분포
# t분포로 랜덤넘버 생성
v <- rt(n = 10000, df = 29)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
# t분포
# t분포로 랜덤넘버 생성
v <- rt(n = 10000, df = 29)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 2), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
# t분포
# t분포로 랜덤넘버 생성
v <- rt(n = 10000, df = 29)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 1), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
curve(dnorm(x), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
curve(dnorm(x), -4, 4, col = 'magenta', lwd = 4, lty = 2, add = T)
curve(dt(x, df = 19), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 19), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
curve(dnorm(x), -4, 4, col = 'magenta', lwd = 4, lty = 2, add = T)
# t분포
# t분포로 랜덤넘버 생성
v <- rt(n = 10000, df = 29)
hist(v, col = 'steelblue', breaks = 100, probability = T)
x <- seq(-4, 4, length = 200)
curve(dt(x, df = 1009), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
curve(dnorm(x), -4, 4, col = 'magenta', lwd = 4, lty = 2, add = T)
curve(dt(x, df = 9), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
curve(dt(x, df = 3), -4, 4, col = 'tomato', lwd = 4, lty = 2, add = T)
pt(q = 0.975, df = 19)
pt(q = 0.975, df = 29)
qt(p = 0.975, df = 29)
pt(q = 2.04523, df = 29)
qt(p = 0.975, df = 29)
qt(p = 0.995, df = 29)
pt(q = 2.756386, df = 29)
qt(p = 0.995, df = 29)
# t분포와 평균검정
# 귀무가설 : 고양이의 몸무게는 2.6kg이다.
data(cats)
str(cats)
t.test(cats)
t.test(cats$Bwt)
t.test(Bwt ~ Sex, cats)
table(cats$Sex)
mean(cats$Bwt)
tapply(Bwt ~ Sex, cats, list(cats$Sex), mean)
tapply(Bwt ~ Sex, cats, INDEX = list(cats$Sex), mean)
tapply(Bwt ~ Sex, cats, INDEX = list(Swx = cats$Sex), mean)
tapply(cats$Bwt, INDEX = list(Swx = cats$Sex), mean)
str(sleep)
t.test(Bwt ~ Sex, cats, conf.level = 0.99)
t.test(extra ~ group, sleep, paired = T)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
library(car)
hist(df$income, col = 'tomato', breaks = 20)
shapiro.test(df$income)
df <- Prestige
hist(df$income, col = 'tomato', breaks = 20)
shapiro.test(df$income)
hist(df$education, col = 'tomato', breaks = 20)
plot(df[, -(5:6)], pch = 19, col = 'tomato')
lm(income ~ education, df)
cor(df[, ,-(5:6)])
cor(df[, -(5:6)])
model <- lm(income ~ education, df)
summary(model)
plot(income ~ education, df)
plot(income ~ education, df, col = 'steelblue')
plot(income ~ education, df, col = 'steelblue', pchisq= 19)
plot(income ~ education, df, col = 'steelblue', pch = 19)
abline(model, col = 'tomato', lwd = 3)
model <- lm(income ~ education + women + prestige, df)
summary(model)
model <- lm(income ~ education + women, df)
summary(model)
model <- lm(income ~ women + prestige, df)
summary(model)
library(stargazer)
library(stargazer)
library(stargazer)
library(stargazer)
library(stargazer)
library(stargazer)
stargazer(model)
stargazer(model, type = text)
stargazer(model, type = 'text')
plot(model)
par(mfrow = c(2,2))
plot(model)
par(mfrow = c(1,1))
# 다항 회귀분석
model <- lm(income ~ education, df)
plot(income ~ education, df, col = 'skyblue')
plot(income ~ education + I(education^2), df, col = 'skyblue')
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
with(df, lines(arrange(data.frame(education, fitted(model)), education), lty = 1,
lwd = 3, col = 'tomato'))
# 다항 회귀분석
model <- lm(income ~ education + I(education^2), df)
plot(income ~ education, df, col = 'skyblue')
library(tidyverse)
with(df, lines(arrange(data.frame(education, fitted(model)), education), lty = 1,
lwd = 3, col = 'tomato'))
summary(model)
df <- mtcars
df <- mtcars
str(df)
df <- mtcars[, 1:6]
str(df)
plot(df, col = 'green', pch = 19)
plot(df, col = 'green', pch = 9)
plot(df, col = 'green', pch = 99)
plot(df, col = 'green', pch = 19)
cor(df)
library(corrplot)
library(corrgram)
corrgram(df)
library(corrgram)
corrgram(df)
lm(mpg ~ .)
lm(mpg ~ ., df)
model <- lm(mpg ~ ., df)
summary(lm(mpg ~ ., df))
summary(model)
model <- lm(mpg ~ hp + wt, df)
summary(model)
model <- lm(mpg ~ ., df)
step(model, direction = 'backword')
step(model, direction = 'backward')
model <- lm(mpg ~ dart + hp + wt + disp, df)
model <- lm(mpg ~ drat + hp + wt + disp, df)
step(model, direction = 'backward')
model_selected <- step(model, direction = 'backward')
summatry(model_selected)
summary(model_selected)
df <- read.csv('train.csv')
df
model <- lm(SalesPrice ~ 1, df)
model <- lm(SalesPrice ~ ., df)
model <- lm(SalePrice ~ 1, df)
step(model, direction = 'backward')
lm(SalePrice ~ 1, df)
model <- lm(SalePrice ~ 1, df)
lm(SalePrice ~ 1, df)
df <- read.csv('train.csv')
df
model <- lm(SalePrice ~ 1, df)
lm(SalePrice ~ 1, df)
step(model, direction = 'backward')
lm(SalePrice ~ ., df)
1
lm(SalePrice ~ 1, df)
step(model, direction = 'backward')
model <- lm(SalePrice ~ subset(df, quantile) , df)
model <- lm(SalePrice ~ subset(df, numeric) , df)
model <- lm(SalePrice ~ subset(df, int) , df)
model <- lm(SalePrice ~ subset(df, int) , df)
df <- subset(df, int)
df <- na.omit(df)
lm(SalePrice ~ 1, df)
subset(df, numeric)
(
subset(df, numeric())
model <- lm(SalePrice ~ subset(df, int) , df)
lm(SalePrice ~ 1, df)
for (i in 1:80){
is.numeric(df[, i])
}
apply(df, 1, is.numeric)
apply(df, 2, is.numeric)
apply(df, 2, is.integer)
apply(df, 2, is.character)
apply(df, 2, is.character)
model <- lm(SalePrice ~ 1, df)
lm(SalePrice ~ 1, df)
step(model, direction = 'backward')
model <- lm(SalePrice ~ 1, df)
df <- read.csv('train.csv')
df <- na.omit(df)
model <- lm(SalePrice ~ 1, df)
lm(SalePrice ~ 1, df)
step(model, direction = 'backward')
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
model <- lm(SalePrice ~ 1, df)
is.nun <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
is.nun <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
is.num <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
df <- df[, is.num]
df <- df[complete.cases(df), ]
model_selected(model, direction = 'backward')
mod.selected(model, direction = 'backward')
df <- read.csv('train.csv')
df <- na.omit(df)
is.num <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
df <- df[, is.num]
df <- df[, -1]
df <- df[complete.cases(df), ]
model <- lm(SalePrice ~ ., df)
dim(df)
model <- lm(SalePrice ~ ., df)
mod_selected <- step(model, direction = 'backward')
summary(mod_selected)
df <- read.csv('train.csv')
df <- na.omit(df)
is.num <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
df <- df[, is.num]
df <- df[, -1]
df <- df[complete.cases(df), ]
model <- lm(SalePrice ~ ., df)
df <- read.csv('train.csv')
is.num <- c()
for (i in 1:80){
is.num[i] <- is.numeric(df[, i])
}
df <- df[, is.num]
df <- df[, -1]
df <- df[complete.cases(df), ]
model <- lm(SalePrice ~ ., df)
lm(SalePrice ~ 1, df)
mod_selected <- step(model, direction = 'backward')
summary(mod_selected)
lm(count ~ spray)
lm(count ~ spray,)
df <- InsectSprays
lm(count ~ spray, )
df <- InsectSprays
lm(count ~ spray, )
lm(count ~ spray, df)
model <- lm(count ~ spray, df)
summary(model)
contrasts(df)
contrasts(df$spray)
df <- mtcars[, 1:6]
str(df)
df$cyl <- factor(df$cyl)
head(df)
table(df$cyl)
df <- mtcars[, 1:6]
table(df$cyl)
df <- mtcars[, 1:6]
str(df)
df$cyl <- factor(df$cyl)
head(df)
table(df$cyl)
lm(mpg ~ ., df)
plot(iris[, 5])
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
plot(iris[, 5])
plot(iris[, c(1, 5)])
plot(iris[iris$Species != 'virgicolor', c(1, 5)])
plot(iris[iris$Species != 'virgicolor', c(1, 5)])
df <- subset(iris, subset = Species !='virgicolor', select =  c(1,5))
plot(df)
df <- split(iris, f = iris$Species)
plot(df)
df <- rbind(df$setosa, df$versicolor)
plot(df[, c(1,5)])
# 로지스틱 회귀분석
# 프아송 회귀분석
library(robust)
# 로지스틱 회귀분석
# 프아송 회귀분석
library(robust)
# 로지스틱 회귀분석
# 프아송 회귀분석
library(robust)
data(breslow.dat)
# 로지스틱 회귀분석
# 프아송 회귀분석
library(robust)
data(breslow.dat)
df <- breslow.dat
str(df)
df<- df[, c('Base', 'Age', 'Trt', 'SumY')]
df<- df[, c('Base', 'Age', 'Trt', 'sumY')]
str(df)
dim(df)
hist(df)
glm(sumY ~ ., df, family = poisson())
plt(glm(sumY ~ ., df, family = poisson()))
glm(sumY ~ ., df, family = poisson
glm(sumY ~ ., df, family = poisson)
glm(sumY ~ ., df, family = poisson)
model <- glm(sumY ~ ., df, family = poisson)
summary(model)
coef(model)
exp(coef(model))
# 이항 로지스틱 회귀분석
df <- split(iris, f = iris$Species)
df <- rbind(df$setosa, df$versicolor)
plot(df[, c(3,5)])
glm(Species ~ Petal.Length, df)
df$Species <- as.integer(df$Species)
glm(Species ~ Petal.Length, df, family = )
glm(Species ~ Petal.Length, df, family = binomial(link = 'logit'))
# 이항 로지스틱 회귀분석
df <- split(iris, f = iris$Species)
df <- rbind(df$setosa, df$versicolor)
plot(df[, c(3,5)])
glm(Species ~ Petal.Length, df, family = binomial(link = 'logit'))
library(palmerpenguins)
pg <- penguins
str(pg)
pg <- pg[complete.cases(pg), -8]
pg$is.adelie <- factor(ifelse(pg$species == 'Adelie', 'yes', 'no'))
barplot(pg$is.adelie)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
barplot(table(pg$is.adelie))
pg <- pg[, -1]
str(pg)
model <- glm(is.adelie ~ ., pg)
model <- glm(is.adelie ~ ., pg, family = poisson())
model <- glm(is.adelie ~ ., pg, family = poisson
model <- glm(is.adelie ~ ., pg, family = binomial(link = 'logit'))
model <- glm(is.adelie ~ ., pg, family = binomial(link = 'logit'))
model <- glm(is.adelie ~ ., pg, family = binomial(link = 'logit'))
summary(model)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
library(palmerpenguins)
pg <- penguins
str(pg)
pg <- pg[complete.cases(pg), -8]
pg$is.adelie <- factor(ifelse(pg$species == 'Adelie', 'yes', 'no'))
barplot(table(pg$is.adelie))
pg <- pg[, -1]
str(pg)
model <- glm(is.adelie ~ ., pg, family = binomial(link = 'logit'))
summary(model)
library(palmerpenguins)
pg <- penguins
str(pg)
pg <- pg[complete.cases(pg), -8]
pg$is.adelie <- factor(ifelse(pg$species == 'Adelie', 'yes', 'no'))
barplot(table(pg$is.adelie))
pg <- pg[, -1]
str(pg)
model <- glm(is.adelie ~ ., pg, family = binomial(link = 'logit'))
summary(model)
model$fitted
pg$pred <- factor(ifelse(model$fitted.values > 0.5, 'yes', 'no'))
table(pg$is.adelie, pg$pred)
library(faraway)
library(faraway)
library(faraway)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
library(tidyverse)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
str(diamonds)
str(mpg)
anscombe
ans <- anscombe
mean(ans$x1)
mean(ans$x2)
mean(ans$x3)
mean(ans$x4)
mean(ans$y1)
mean(ans$y2)
mean(ans$y3)
mean(ans$y4)
cor(ans$x1, ans$y1)
cor(ans$x2, ans$y2)
cor(ans$x3, ans$y3)
cor(ans$x4, ans$y4)
lm(y1 ~ x1, data = ans)
lm(y2 ~ x2, data = ans)
lm(y3 ~ x3, data = ans)
lm(y4 ~ x4, data = ans)
par(mfrow = c(2,2))
plot(ans$x1, ans$y1, col = 'orange', pch = 19)
abline(lm(y1 ~ x1, data = ans), col = 'tomato')
plot(ans$x2, ans$y2, col = 'orange', pch = 19)
abline(lm(y2 ~ x2, data = ans), col = 'tomato')
plot(ans$x3, ans$y3, col = 'orange', pch = 19)
abline(lm(y3 ~ x3, data = ans), col = 'tomato')
plot(ans$x4, ans$y4, col = 'orange', pch = 19)
abline(lm(y4 ~ x4, data = ans), col = 'tomato')
par(mfrow = c(1,1))
# aes
p <- ggplot(data = mpg,
mapping = aes(x = displ, y = hwy))
# class >> 범주형 변수
# alpha >> 투명도, shape >> 모양
p + geom_point(mapping = aes(color = class,
size = class,
alpha = 0.3))
# class 별(그룹) nrow 개수 2개 (그래프 행) par
p + geom_point(color = 'tomato') +
facet_wrap(~class, nrow = 2)
p + geom_point(color="tomato") +
facet_grid(drv ~ cyl)
# jitter 점이 겹쳐 있으면 흔들어서 볼 수 있게
# smooth >> 추세선
p + geom_point(color = 'tomato') +
geom_smooth(color = 'cyan')
diamonds
p <- ggplot(data = diamonds,
mapping = aes(x = cut))
table(diamonds$cut)
# geom_bar x축만 알면 count 자동으로
p + geom_bar()
# 누적 막대 그래프
table(diamonds$clarity)
p + geom_bar(mapping = aes(fill = clarity))
# 비율
p + geom_bar(mapping = aes(fill = clarity),
position = 'fill')
#
p + geom_bar(mapping = aes(fill = clarity),
position = 'dodge')
lm(y1 ~ x1, data = ans)
lm(y2 ~ x2, data = ans)
lm(y3 ~ x3, data = ans)
lm(y4 ~ x4, data = ans)
par(mfrow = c(2,2))
# 데이터 사우르스 그리기
library(datasaurus)
# 데이터 사우르스 그리기
library(datasaurus)
# 데이터 사우르스 그리기
library(datasaurus)
# 데이터 사우르스 그리기
library(datasauRus)
# 데이터 사우르스 그리기
library(datasauRus)
# 데이터 사우르스 그리기
library(datasauRus)
# 데이터 사우르스 그리기
library(datasauRus)
# 데이터 사우르스 그리기
library(datasauRus)
# 데이터 사우르스 그리기
install.packages(datasauRus)
library(datasauRus)
library('datasauRus')
library('datasauRus')
# 데이터 사우르스 그리기
install.packages(datasauRus)
library(datasauRus)
library(Datasaurus)
datasauRus
# 데이터 사우르스 그리기
install.packages(datasauRus)
library(datasauRus)
library(gapminder)
# 그래픽 디스플레이 창 생성
windows(width = 7, height = 5)
# 라이브러리 로딩
library(tidyverse)
library(esquisse)
library(gapminder)
library(ggplot2)
esquisse::esquisser()
esquisse::esquisser()
esquisse::esquisser()
library(shiny)
library(shiny)
